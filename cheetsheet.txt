SEQUELIZE - ORM (object-relations mapping framework) - програмний каркас для взаємодії між бекендом і БД.

Фреймворк пропонує допомогу з:
- моделі
- версійная міграція
- коннект між беком і БД

Версійна міграція - це перехід від однієї консистентої (узгодженої) схеми БД до наступної версії.


Основні типи даних для прописування моделям:
https://sequelize.org/docs/v6/core-concepts/model-basics/#data-types




CREATE TABLE users (
    id serial PRIMARY KEY,
)

Зв'язки між таблицями на рівні міграцій
https://sequelize.org/docs/v6/other-topics/migrations/#migration-skeleton



ORM

1 npm i pg pg-hstore sequelize
  npm i -D sequelize-cli
2 npx sequelize init 
  -> configs (edit), models, migrations, seeders
3 npx sequelize db:create
4 npx sequelize model:create --name Student --attributes firstName:string,... 
  -> create model + migration
5 npx sequelize db:migrate 
  -> create table in db
6 edit model: type, validators, constraints

Add migration:
npx sequelize-cli migration:generate --name add-birthday-constraint

Add seeder:
npx sequelize seed:create --name users
Run seeders:
npx sequelize db:seed:all

Association

1:n
Migration: => create table in db => Eager Loading (include) 
      groupId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Groups',
          key: 'id',
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      },
Models: => Lazy Loading (magic methods - instances methods)
      Student.belongsTo(models.Group, {
        foreignKey: 'groupId',
      });      
      
       Group.hasMany(models.Student, {
        foreignKey: {
          name: 'groupId',
          allowNull: false,
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      });
      
// groupId REFERENCES Groups(id) NOT NULL ON DELETE RESTRICT ON UPDATE CASCADE
   
m:n   
Migration: 
StudentSubjects table  
      studentId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Students',
          key: 'id',
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      },
      subjectId: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'Subjects',
          key: 'id',
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      },
            
Models:       
      Subject.belongsToMany(models.Student, {
        through: 'StudentSubjects',
        foreignKey: 'subjectId',
      });   
       
      Student.belongsToMany(models.Subject, {
        through: 'StudentSubjects',
        foreignKey: 'studentId',
      });    
        
StudentSubjects.init(
    {
      studentId: {
        type: DataTypes.INTEGER,
        allowNull:false,
        references: {
          model: 'Student',
          key: 'id',
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      },
      subjectId: {
        type: DataTypes.INTEGER,
        allowNull:false,
        references: {
          model: 'Subject',
          key: 'id',
        },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE',
      },
      ...      


// GET /api/users/1/tasks:
1 add migration + model task  
2 controller    
      




      Робота з файлами на сервері

----- Що передаємо -----

- Об'єкти в json -
{}, [], number, string, boolean, null

{} => JSON => app.use(express.json()) => {}
Content-Type: application/json

АБО

- Зображення (з текстом) -

image (+{})
Content-Type: multipart/form-data

Для збереження файлів multer
Для отримання файлів - використаємо express 

----- Роздача статичних файлів -----

app.use(express.static('public'));

Якщо файл збережено як
public
   cat.jpg
Тоді до нього можна звернутись як   
http://host:port/cat.jpeg   

----- Збереження файлів -----

multer => save file => req.file, req.body
                       saved filename 
                       
1. multer збереже файл в статичній папці
   згенерує ім'я файла і прокине далі
2. Далі контроллер збереже ім'я файла в БД для, наприклад, користувача userId                       